// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/28/2019 18:22:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LightBar
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LightBar_vlg_sample_tst(
	clock,
	iButton,
	switch,
	sampler_tx
);
input  clock;
input  iButton;
input  switch;
output sampler_tx;

reg sample;
time current_time;
always @(clock or iButton or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LightBar_vlg_check_tst (
	debug,
	greenLED,
	redLED,
	segment7,
	timer,
	sampler_rx
);
input  debug;
input [0:7] greenLED;
input [0:7] redLED;
input [0:6] segment7;
input  timer;
input sampler_rx;

reg  debug_expected;
reg [0:7] greenLED_expected;
reg [0:7] redLED_expected;
reg [0:6] segment7_expected;
reg  timer_expected;

reg  debug_prev;
reg [0:7] greenLED_prev;
reg [0:7] redLED_prev;
reg [0:6] segment7_prev;
reg  timer_prev;

reg  debug_expected_prev;
reg [0:7] greenLED_expected_prev;
reg [0:7] redLED_expected_prev;
reg [0:6] segment7_expected_prev;
reg  timer_expected_prev;

reg  last_debug_exp;
reg [0:7] last_greenLED_exp;
reg [0:7] last_redLED_exp;
reg [0:6] last_segment7_exp;
reg  last_timer_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug_prev = debug;
	greenLED_prev = greenLED;
	redLED_prev = redLED;
	segment7_prev = segment7;
	timer_prev = timer;
end

// update expected /o prevs

always @(trigger)
begin
	debug_expected_prev = debug_expected;
	greenLED_expected_prev = greenLED_expected;
	redLED_expected_prev = redLED_expected;
	segment7_expected_prev = segment7_expected;
	timer_expected_prev = timer_expected;
end



// expected debug
initial
begin
	debug_expected = 1'bX;
end 

// expected timer
initial
begin
	timer_expected = 1'bX;
end 
// expected redLED[ 7 ]
initial
begin
	redLED_expected[7] = 1'bX;
end 
// expected redLED[ 6 ]
initial
begin
	redLED_expected[6] = 1'bX;
end 
// expected redLED[ 5 ]
initial
begin
	redLED_expected[5] = 1'bX;
end 
// expected redLED[ 4 ]
initial
begin
	redLED_expected[4] = 1'bX;
end 
// expected redLED[ 3 ]
initial
begin
	redLED_expected[3] = 1'bX;
end 
// expected redLED[ 2 ]
initial
begin
	redLED_expected[2] = 1'bX;
end 
// expected redLED[ 1 ]
initial
begin
	redLED_expected[1] = 1'bX;
end 
// expected redLED[ 0 ]
initial
begin
	redLED_expected[0] = 1'bX;
end 
// expected greenLED[ 7 ]
initial
begin
	greenLED_expected[7] = 1'bX;
end 
// expected greenLED[ 6 ]
initial
begin
	greenLED_expected[6] = 1'bX;
end 
// expected greenLED[ 5 ]
initial
begin
	greenLED_expected[5] = 1'bX;
end 
// expected greenLED[ 4 ]
initial
begin
	greenLED_expected[4] = 1'bX;
end 
// expected greenLED[ 3 ]
initial
begin
	greenLED_expected[3] = 1'bX;
end 
// expected greenLED[ 2 ]
initial
begin
	greenLED_expected[2] = 1'bX;
end 
// expected greenLED[ 1 ]
initial
begin
	greenLED_expected[1] = 1'bX;
end 
// expected greenLED[ 0 ]
initial
begin
	greenLED_expected[0] = 1'bX;
end 
// expected segment7[ 6 ]
initial
begin
	segment7_expected[6] = 1'bX;
end 
// expected segment7[ 5 ]
initial
begin
	segment7_expected[5] = 1'bX;
end 
// expected segment7[ 4 ]
initial
begin
	segment7_expected[4] = 1'bX;
end 
// expected segment7[ 3 ]
initial
begin
	segment7_expected[3] = 1'bX;
end 
// expected segment7[ 2 ]
initial
begin
	segment7_expected[2] = 1'bX;
end 
// expected segment7[ 1 ]
initial
begin
	segment7_expected[1] = 1'bX;
end 
// expected segment7[ 0 ]
initial
begin
	segment7_expected[0] = 1'bX;
end 
// generate trigger
always @(debug_expected or debug or greenLED_expected or greenLED or redLED_expected or redLED or segment7_expected or segment7 or timer_expected or timer)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug = %b | expected greenLED = %b | expected redLED = %b | expected segment7 = %b | expected timer = %b | ",debug_expected_prev,greenLED_expected_prev,redLED_expected_prev,segment7_expected_prev,timer_expected_prev);
	$display("| real debug = %b | real greenLED = %b | real redLED = %b | real segment7 = %b | real timer = %b | ",debug_prev,greenLED_prev,redLED_prev,segment7_prev,timer_prev);
`endif
	if (
		( debug_expected_prev !== 1'bx ) && ( debug_prev !== debug_expected_prev )
		&& ((debug_expected_prev !== last_debug_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp = debug_expected_prev;
	end
	if (
		( greenLED_expected_prev[0] !== 1'bx ) && ( greenLED_prev[0] !== greenLED_expected_prev[0] )
		&& ((greenLED_expected_prev[0] !== last_greenLED_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[0] = greenLED_expected_prev[0];
	end
	if (
		( greenLED_expected_prev[1] !== 1'bx ) && ( greenLED_prev[1] !== greenLED_expected_prev[1] )
		&& ((greenLED_expected_prev[1] !== last_greenLED_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[1] = greenLED_expected_prev[1];
	end
	if (
		( greenLED_expected_prev[2] !== 1'bx ) && ( greenLED_prev[2] !== greenLED_expected_prev[2] )
		&& ((greenLED_expected_prev[2] !== last_greenLED_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[2] = greenLED_expected_prev[2];
	end
	if (
		( greenLED_expected_prev[3] !== 1'bx ) && ( greenLED_prev[3] !== greenLED_expected_prev[3] )
		&& ((greenLED_expected_prev[3] !== last_greenLED_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[3] = greenLED_expected_prev[3];
	end
	if (
		( greenLED_expected_prev[4] !== 1'bx ) && ( greenLED_prev[4] !== greenLED_expected_prev[4] )
		&& ((greenLED_expected_prev[4] !== last_greenLED_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[4] = greenLED_expected_prev[4];
	end
	if (
		( greenLED_expected_prev[5] !== 1'bx ) && ( greenLED_prev[5] !== greenLED_expected_prev[5] )
		&& ((greenLED_expected_prev[5] !== last_greenLED_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[5] = greenLED_expected_prev[5];
	end
	if (
		( greenLED_expected_prev[6] !== 1'bx ) && ( greenLED_prev[6] !== greenLED_expected_prev[6] )
		&& ((greenLED_expected_prev[6] !== last_greenLED_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[6] = greenLED_expected_prev[6];
	end
	if (
		( greenLED_expected_prev[7] !== 1'bx ) && ( greenLED_prev[7] !== greenLED_expected_prev[7] )
		&& ((greenLED_expected_prev[7] !== last_greenLED_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port greenLED[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", greenLED_expected_prev);
		$display ("     Real value = %b", greenLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_greenLED_exp[7] = greenLED_expected_prev[7];
	end
	if (
		( redLED_expected_prev[0] !== 1'bx ) && ( redLED_prev[0] !== redLED_expected_prev[0] )
		&& ((redLED_expected_prev[0] !== last_redLED_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[0] = redLED_expected_prev[0];
	end
	if (
		( redLED_expected_prev[1] !== 1'bx ) && ( redLED_prev[1] !== redLED_expected_prev[1] )
		&& ((redLED_expected_prev[1] !== last_redLED_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[1] = redLED_expected_prev[1];
	end
	if (
		( redLED_expected_prev[2] !== 1'bx ) && ( redLED_prev[2] !== redLED_expected_prev[2] )
		&& ((redLED_expected_prev[2] !== last_redLED_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[2] = redLED_expected_prev[2];
	end
	if (
		( redLED_expected_prev[3] !== 1'bx ) && ( redLED_prev[3] !== redLED_expected_prev[3] )
		&& ((redLED_expected_prev[3] !== last_redLED_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[3] = redLED_expected_prev[3];
	end
	if (
		( redLED_expected_prev[4] !== 1'bx ) && ( redLED_prev[4] !== redLED_expected_prev[4] )
		&& ((redLED_expected_prev[4] !== last_redLED_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[4] = redLED_expected_prev[4];
	end
	if (
		( redLED_expected_prev[5] !== 1'bx ) && ( redLED_prev[5] !== redLED_expected_prev[5] )
		&& ((redLED_expected_prev[5] !== last_redLED_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[5] = redLED_expected_prev[5];
	end
	if (
		( redLED_expected_prev[6] !== 1'bx ) && ( redLED_prev[6] !== redLED_expected_prev[6] )
		&& ((redLED_expected_prev[6] !== last_redLED_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[6] = redLED_expected_prev[6];
	end
	if (
		( redLED_expected_prev[7] !== 1'bx ) && ( redLED_prev[7] !== redLED_expected_prev[7] )
		&& ((redLED_expected_prev[7] !== last_redLED_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port redLED[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", redLED_expected_prev);
		$display ("     Real value = %b", redLED_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_redLED_exp[7] = redLED_expected_prev[7];
	end
	if (
		( segment7_expected_prev[0] !== 1'bx ) && ( segment7_prev[0] !== segment7_expected_prev[0] )
		&& ((segment7_expected_prev[0] !== last_segment7_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[0] = segment7_expected_prev[0];
	end
	if (
		( segment7_expected_prev[1] !== 1'bx ) && ( segment7_prev[1] !== segment7_expected_prev[1] )
		&& ((segment7_expected_prev[1] !== last_segment7_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[1] = segment7_expected_prev[1];
	end
	if (
		( segment7_expected_prev[2] !== 1'bx ) && ( segment7_prev[2] !== segment7_expected_prev[2] )
		&& ((segment7_expected_prev[2] !== last_segment7_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[2] = segment7_expected_prev[2];
	end
	if (
		( segment7_expected_prev[3] !== 1'bx ) && ( segment7_prev[3] !== segment7_expected_prev[3] )
		&& ((segment7_expected_prev[3] !== last_segment7_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[3] = segment7_expected_prev[3];
	end
	if (
		( segment7_expected_prev[4] !== 1'bx ) && ( segment7_prev[4] !== segment7_expected_prev[4] )
		&& ((segment7_expected_prev[4] !== last_segment7_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[4] = segment7_expected_prev[4];
	end
	if (
		( segment7_expected_prev[5] !== 1'bx ) && ( segment7_prev[5] !== segment7_expected_prev[5] )
		&& ((segment7_expected_prev[5] !== last_segment7_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[5] = segment7_expected_prev[5];
	end
	if (
		( segment7_expected_prev[6] !== 1'bx ) && ( segment7_prev[6] !== segment7_expected_prev[6] )
		&& ((segment7_expected_prev[6] !== last_segment7_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment7_expected_prev);
		$display ("     Real value = %b", segment7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segment7_exp[6] = segment7_expected_prev[6];
	end
	if (
		( timer_expected_prev !== 1'bx ) && ( timer_prev !== timer_expected_prev )
		&& ((timer_expected_prev !== last_timer_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_expected_prev);
		$display ("     Real value = %b", timer_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_timer_exp = timer_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LightBar_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg iButton;
reg switch;
// wires                                               
wire debug;
wire [0:7] greenLED;
wire [0:7] redLED;
wire [0:6] segment7;
wire timer;

wire sampler;                             

// assign statements (if any)                          
LightBar i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.debug(debug),
	.greenLED(greenLED),
	.iButton(iButton),
	.redLED(redLED),
	.segment7(segment7),
	.switch(switch),
	.timer(timer)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// iButton
initial
begin
	iButton = 1'b1;
end 

// switch
initial
begin
	switch = 1'b0;
	switch = #20000 1'b1;
end 

LightBar_vlg_sample_tst tb_sample (
	.clock(clock),
	.iButton(iButton),
	.switch(switch),
	.sampler_tx(sampler)
);

LightBar_vlg_check_tst tb_out(
	.debug(debug),
	.greenLED(greenLED),
	.redLED(redLED),
	.segment7(segment7),
	.timer(timer),
	.sampler_rx(sampler)
);
endmodule

